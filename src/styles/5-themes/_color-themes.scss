


$themes: (
    default: (
            bg: $bg--light,
            card-bg: $bg--card--light,
            text: $text--light,
            text-secondary: $text--2--light,
            link: $brand--blue--light,
            hover: $hover--light,
            border: $border--light
    ),
    dark: (
            bg: linear-gradient($bg--dark--top, $bg--dark--bottom),
            card-bg: $bg--card--dark,
            text: $text--dark,
            text-secondary: $text--2--dark,
            link: $brand--blue--dark,
            hover: $hover--dark,
            border: $border--dark
    ),
);

@mixin themed() {
    @each $theme, $map in $themes {
    .theme--#{$theme} & {
    $theme-map: () !global;
    @each $key, $submap in $map {
            $value: map-get(map-get($themes, $theme), '#{$key}');
            $theme-map: map-merge($theme-map, ($key: $value)) !global;
            }
        @content;
        $theme-map: null !global;
        }
    }
}

@function t($key) {
    @return map-get($theme-map, $key);
}

//Then you call the them including the mixin in the class you need it and use a context provider

// @include themed() {
//     color: t($text);
//     background: t($bg);
//   }


//<div className={'theme ' + (this.state.dark ? 'theme--dark' : 'theme--default')}>
